upstream config {
    ip_hash;
    server web:443 weight=5;

}

server {
    listen 80;
    return 301 https://$host$request_uri;
}

server {
    listen      443 ssl default_server;
    listen [::]:443 ssl default_server;
    server_name $SERVER_NAME;
    root /usr/src/dashboard/web/server/build;
    index index.html;
		# Always points to index.html
    client_max_body_size 4G;
    gzip on;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";

    gzip_vary on;
    gzip_proxied expired no-cache no-store private auth;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/vnd.    ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon
    gunzip on;
    gzip_static on;
   
    ssl_certificate        /etc/nginx/cert.crt;
    ssl_certificate_key    /etc/nginx/certkey.key;
    ssl_session_cache  builtin:1000  shared:SSL:10m;
    ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
    ssl_prefer_server_ciphers on;
        location / {
            try_files $uri /index.html;
    }
    location /api/ {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      add_header 'Access-Control-Allow-Origin'  http://config;

      proxy_set_header X-Forwarded-Proto https;
      proxy_pass          http://config;
      proxy_read_timeout  90;
      proxy_redirect off;
    }
    location /static/ {
      alias /usr/src/dashboard/web/server/build/;

}

location ~*  \.(jpg|jpeg|png|gif|ico|css|js)$ {
       expires 1d;
    }

    location ~* \.(?:css|js|ico|woff|eot|svg|ttf|otf|png|gif|jpe?g) {
  access_log off;
  add_header Cache-Control public;
}

location ~* \.(?:css|js|woff|eot|svg|ttf|otf|png|gif|jpe?g) {
  expires max;
}

# missing vary header on zippable fonts
location ~* \.(?:eot|ttf|svg)$ {
  add_header Vary Accept-Encoding;
}



  }